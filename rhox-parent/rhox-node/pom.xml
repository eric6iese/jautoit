<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.rhox</groupId>
        <artifactId>rhox-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>rhox-node</artifactId>
    <description>... This is an attempt to create a minimal wrapper to use some node libraries on nashorn.
    It does NOT aim to be a real node environment!
    
    Project structure information:
    Currently, I do not know if i really want do to this.
    It would be an awful lot of work, and i'm not really sure if it will provide enough of
    a benefit.
        
    There are 3 different ways to realize this concept:
    1. Just create individual polyfill functions as a best-meant effort.
    2. Reuse the entire node.js sources and create the bindings which the functions
        rely upon
    3. Something in between: Try to create the binding first, but if its too much then
        switch to handcoding.
        
    The only portable solution would be (2), but the main problem here is that its hard to make a start:
        Most node libraries dependent on other node-libraries so that to use just one source file i first
        have to create and bind them all.
        Another problem is that for some functions, creating a binding would  be very hard as the
        functions are tailored for low-level c.
    On the other hand, because js tends to be very lazy it might be worth it to try to implement just
        some simple functions as bindings: If a function is missing, the system WILL fail, but who cares?
        The nice part is that i can create most of the bindings in java instead of a system language,
        esp. stuff like IO.
        The bad part is that some conceptual differences are HARD to bridge, like the missing event-loop
        which has to be created to even use a single async function!
        
    I don't know if I am (or will ever be) ready to do this. I would only if a partial implementation is
        possible, and in no other scenario at all.
    
    Futher notes on this effort:
    nodyn really has done this, and I guess they have done it pretty well.
    Sooo it should be possible to rely on nodyn to provide this functionality.
    And what does this have to do with rhox?
    Well... if I really want to use nodyn then I have to integrate it, and that means effort since the
    project is no longer maintained. So even if I can skip the implementation part I have to accept
    that the project will fail to work very soon.
    The only options to prevent this would to either stay at the last fixed version which nodyn had used
        or to track important changes by myself (no?)
    Also, I still have to integrate the nodyn stack with all its dependencies in a simple, skriptlike manner on
    the fly, something which really isn't that easy even if the code is availabe. Remember, rhox tries
    to use scripts and code at runtime - and not to launche a node-framework upfront.
    </description>
        
    <dependencies>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>../src/assembly/node_module.xml</descriptor>
                    </descriptors>
                    <appendAssemblyId>false</appendAssemblyId>
                    <attach>false</attach>
                    <finalName>${project.artifactId}</finalName>
                    <outputDirectory>../node_modules</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <name>rhox-node</name>
</project>